// src/services/emailService.ts (v√≠ d·ª•)
import nodemailer from 'nodemailer'
import dotenv from 'dotenv'
import path from 'path'
import fs from 'fs'
import { fileURLToPath } from 'url'

dotenv.config()
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

async function createTransporter() {
  // N·∫øu d√πng Gmail, b·∫°n n√™n s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng cho email v√† m·∫≠t kh·∫©u ·ª©ng d·ª•ng
  const transporter = nodemailer.createTransport({
    host: 'smtp.gmail.com', // Ho·∫∑c 'smtp.office365.com', 'smtp.mailgun.org', ...
    port: 465, // Ho·∫∑c 587 cho TLS
    secure: true, // true cho port 465, false cho c√°c port kh√°c (nh∆∞ 587 v·ªõi STARTTLS)
    auth: {
      user: process.env.MAILER_EMAIL, // ƒê·ªãa ch·ªâ email c·ªßa b·∫°n (v√≠ d·ª•: your.email@gmail.com)
      pass: process.env.MAILER_EMAIL_APP_PASSWORD // M·∫≠t kh·∫©u ·ª©ng d·ª•ng cho Gmail, ho·∫∑c m·∫≠t kh·∫©u t√†i kho·∫£n
    }
    // tls: {
    //   // kh√¥ng l√†m g√¨ n·∫øu servername kh√¥ng kh·ªõp v·ªõi t√™n trong certificate
    //   rejectUnauthorized: false
    // }
  })

  // (T√πy ch·ªçn) X√°c minh c·∫•u h√¨nh transporter (ch·ªâ n√™n l√†m m·ªôt l·∫ßn khi kh·ªüi t·∫°o)
  try {
    await transporter.verify()
    console.log('üìß Server is ready to take our messages')
  } catch (error) {
    console.error('‚ùå Error verifying transporter:', error)
  }

  return transporter
}

interface MailOptions {
  to: string // ƒê·ªãa ch·ªâ ng∆∞·ªùi nh·∫≠n
  subject: string // Ti√™u ƒë·ªÅ email
  text?: string // N·ªôi dung d·∫°ng text thu·∫ßn
  htmlPath: string // N·ªôi dung d·∫°ng HTML (∆∞u ti√™n h∆°n text n·∫øu c·∫£ hai c√πng c√≥)
  placeholders?: { [key: string]: string }
}

export async function sendMail(
  to: string, // ƒê·ªãa ch·ªâ ng∆∞·ªùi nh·∫≠n
  subject: string, // Ti√™u ƒë·ªÅ email
  text?: string, // N·ªôi dung d·∫°ng text thu·∫ßn
  htmlPath?: string, // N·ªôi dung d·∫°ng HTML (∆∞u ti√™n h∆°n text n·∫øu c·∫£ hai c√πng c√≥)
  placeholders?: { [key: string]: string }
) {
  try {
    const transporter = await createTransporter() // Ho·∫∑c b·∫°n c√≥ th·ªÉ kh·ªüi t·∫°o transporter m·ªôt l·∫ßn v√† t√°i s·ª≠ d·ª•ng
    // console.log('htmlPath', htmlPath)
    const absolutePath = path.join(__dirname, '..', htmlPath as string) // Gi·∫£ s·ª≠ templates n·∫±m ngo√†i th∆∞ m·ª•c services
    // console.log('absolutePath', absolutePath)
    let htmlContent = fs.readFileSync(absolutePath, 'utf-8')
    // console.log('htmlContent', htmlContent)
    if (placeholders) {
      for (const key in placeholders) {
        // T·∫°o m·ªôt RegExp ƒë·ªÉ thay th·∫ø t·∫•t c·∫£ c√°c l·∫ßn xu·∫•t hi·ªán c·ªßa placeholder
        // V√≠ d·ª•: /{{USER_NAME}}/g
        const regex = new RegExp(`{{${key}}}`, 'g')
        htmlContent = htmlContent.replace(regex, placeholders[key])
      }
    }

    const mailOptions = {
      from: `Gender Health Management: ${process.env.EMAIL_USER}`, // ƒê·ªãa ch·ªâ ng∆∞·ªùi g·ª≠i (ph·∫£i kh·ªõp v·ªõi user trong auth)
      to,
      subject,
      text,
      html: htmlContent
    }

    const info = await transporter.sendMail(mailOptions)
    console.log('üì¨ Message sent: %s', info.messageId)
    // Preview URL: %s (ch·ªâ c√≥ n·∫øu d√πng Ethereal.email)
    // console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));
    return info
  } catch (error) {
    console.error('‚ùå Error sending email:', error)
    throw error // N√©m l·ªói ra ƒë·ªÉ h√†m g·ªçi c√≥ th·ªÉ x·ª≠ l√Ω
  }
}

export default createTransporter
