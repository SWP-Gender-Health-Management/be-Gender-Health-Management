import { faker } from '@faker-js/faker'
import { AppDataSource } from '../config/database.config.js'
import Account from '../models/Entity/account.entity.js'
import MenstrualCycle from '../models/Entity/menstrual_cycle.entity.js'
import { Role } from '../enum/role.enum.js'

async function createMenstrualCycles() {
  try {
    // Kh·ªüi t·∫°o k·∫øt n·ªëi database
    await AppDataSource.initialize()
    console.log('Database connected successfully')

    const accountRepository = AppDataSource.getRepository(Account)
    const menstrualCycleRepository = AppDataSource.getRepository(MenstrualCycle)

    // L·∫•y 10 customer n·ªØ ƒë·∫ßu ti√™n
    const femaleCustomers = await accountRepository.find({
      where: {
        role: Role.CUSTOMER,
        gender: 'N·ªØ'
      },
      take: 10
    })

    console.log(`Found ${femaleCustomers.length} female customers`)

    if (femaleCustomers.length === 0) {
      console.log('‚ùå No female customers found')
      return
    }

    const menstrualCycles = []

    for (const customer of femaleCustomers) {
      console.log(`Creating menstrual cycle for: ${customer.full_name}`)

      // T·∫°o d·ªØ li·ªáu chu k·ª≥ kinh nguy·ªát th·ª±c t·∫ø
      const cycleLength = faker.number.int({ min: 25, max: 35 }) // Chu k·ª≥ 25-35 ng√†y
      const periodLength = faker.number.int({ min: 3, max: 7 }) // Kinh nguy·ªát 3-7 ng√†y

      // T·∫°o ng√†y b·∫Øt ƒë·∫ßu chu k·ª≥ g·∫ßn ƒë√¢y (trong v√≤ng 3 th√°ng qua)
      const recentStartDate = faker.date.between({
        from: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000), // 90 ng√†y tr∆∞·ªõc
        to: new Date()
      })

      // T√≠nh ng√†y k·∫øt th√∫c chu k·ª≥
      const endDate = new Date(recentStartDate)
      endDate.setDate(endDate.getDate() + cycleLength)

      // T·∫°o ng√†y b·∫Øt ƒë·∫ßu kinh nguy·ªát (trong chu k·ª≥)
      const periodStartDate = new Date(recentStartDate)
      periodStartDate.setDate(periodStartDate.getDate() + faker.number.int({ min: 0, max: cycleLength - periodLength }))

      // T√≠nh ng√†y k·∫øt th√∫c kinh nguy·ªát
      const periodEndDate = new Date(periodStartDate)
      periodEndDate.setDate(periodEndDate.getDate() + periodLength)

      // T·∫°o ghi ch√∫ ng·∫´u nhi√™n
      const notes = [
        'Chu k·ª≥ ƒë·ªÅu ƒë·∫∑n, kh√¥ng c√≥ tri·ªáu ch·ª©ng b·∫•t th∆∞·ªùng',
        'C√≥ ƒëau b·ª•ng nh·∫π trong ng√†y ƒë·∫ßu',
        'L∆∞·ª£ng m√°u kinh b√¨nh th∆∞·ªùng',
        'C√≥ c·∫£m gi√°c m·ªát m·ªèi nh·∫π',
        'Kh√¥ng c√≥ tri·ªáu ch·ª©ng ƒë·∫∑c bi·ªát',
        'Chu k·ª≥ ·ªïn ƒë·ªãnh, s·ª©c kh·ªèe t·ªët',
        'C√≥ ƒëau l∆∞ng nh·∫π',
        'T√¢m tr·∫°ng ·ªïn ƒë·ªãnh',
        'Chu k·ª≥ b√¨nh th∆∞·ªùng',
        'Kh√¥ng c√≥ d·∫•u hi·ªáu b·∫•t th∆∞·ªùng'
      ]

      const randomNote = notes[Math.floor(Math.random() * notes.length)]

      const menstrualCycle = {
        start_date: periodStartDate,
        end_date: periodEndDate,
        period: cycleLength,
        note: randomNote,
        account: customer
      }

      menstrualCycles.push(menstrualCycle)

      console.log(`  - Cycle: ${cycleLength} days, Period: ${periodLength} days`)
      console.log(`  - Start: ${periodStartDate.toLocaleDateString('vi-VN')}`)
      console.log(`  - End: ${periodEndDate.toLocaleDateString('vi-VN')}`)
    }

    // L∆∞u t·∫•t c·∫£ menstrual cycles v√†o database
    const savedCycles = await menstrualCycleRepository.save(menstrualCycles)

    console.log(`\n‚úÖ Successfully created ${savedCycles.length} menstrual cycles`)
    console.log(`üìä Summary:`)
    console.log(`- ${femaleCustomers.length} female customers`)
    console.log(`- ${savedCycles.length} menstrual cycles created`)

    // Th·ªëng k√™ chu k·ª≥
    const cycleStats = {
      total: savedCycles.length,
      avgPeriod: Math.round(savedCycles.reduce((sum, cycle) => sum + cycle.period, 0) / savedCycles.length),
      minPeriod: Math.min(...savedCycles.map((cycle) => cycle.period)),
      maxPeriod: Math.max(...savedCycles.map((cycle) => cycle.period))
    }

    console.log('\nüìà Cycle Statistics:')
    console.log(`- Average cycle length: ${cycleStats.avgPeriod} days`)
    console.log(`- Range: ${cycleStats.minPeriod} - ${cycleStats.maxPeriod} days`)

    // Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng chu k·ª≥
    console.log('\nüìã Menstrual Cycles Details:')
    savedCycles.forEach((cycle, index) => {
      const customer = femaleCustomers[index]
      console.log(`${index + 1}. ${customer.full_name}`)
      console.log(`   - Cycle: ${cycle.period} days`)
      console.log(
        `   - Period: ${cycle.start_date.toLocaleDateString('vi-VN')} - ${cycle.end_date.toLocaleDateString('vi-VN')}`
      )
      console.log(`   - Note: ${cycle.note}`)
      console.log('')
    })
  } catch (error) {
    console.error('‚ùå Error creating menstrual cycles:', error)
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi database
    if (AppDataSource.isInitialized) {
      await AppDataSource.destroy()
      console.log('Database connection closed')
    }
    process.exit(0)
  }
}

// Ch·∫°y script
createMenstrualCycles()
