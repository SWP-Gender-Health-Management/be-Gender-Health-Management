import { AppDataSource } from '../config/database.config.js'
import Laboratory from '../models/Entity/laborarity.entity.js'

async function createSTITests() {
  try {
    // Kh·ªüi t·∫°o k·∫øt n·ªëi database
    await AppDataSource.initialize()
    console.log('Database connected successfully')

    const laboratoryRepository = AppDataSource.getRepository(Laboratory)

    // T·∫°o c√°c lo·∫°i x√©t nghi·ªám STIs
    const stiTests = [
      {
        name: 'X√©t nghi·ªám HIV (Anti-HIV)',
        specimen: 'M√°u tƒ©nh m·∫°ch',
        normal_range: '√Çm t√≠nh',
        unit: 'S/CO',
        description:
          'X√©t nghi·ªám kh√°ng th·ªÉ HIV ƒë·ªÉ ph√°t hi·ªán nhi·ªÖm HIV. K·∫øt qu·∫£ √¢m t√≠nh c√≥ nghƒ©a l√† kh√¥ng ph√°t hi·ªán kh√°ng th·ªÉ HIV trong m√°u.',
        price: 250000,
        is_active: true
      },
      {
        name: 'X√©t nghi·ªám Chlamydia trachomatis',
        specimen: 'N∆∞·ªõc ti·ªÉu/Ph·∫øt t·∫ø b√†o',
        normal_range: '√Çm t√≠nh',
        unit: 'Copies/ml',
        description: 'X√©t nghi·ªám ph√°t hi·ªán vi khu·∫©n Chlamydia trachomatis g√¢y b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c.',
        price: 180000,
        is_active: true
      },
      {
        name: 'X√©t nghi·ªám Neisseria gonorrhoeae',
        specimen: 'N∆∞·ªõc ti·ªÉu/Ph·∫øt t·∫ø b√†o',
        normal_range: '√Çm t√≠nh',
        unit: 'Copies/ml',
        description: 'X√©t nghi·ªám ph√°t hi·ªán vi khu·∫©n l·∫≠u c·∫ßu (Neisseria gonorrhoeae) g√¢y b·ªánh l·∫≠u.',
        price: 180000,
        is_active: true
      },
      {
        name: 'X√©t nghi·ªám Treponema pallidum (Giang mai)',
        specimen: 'M√°u tƒ©nh m·∫°ch',
        normal_range: '√Çm t√≠nh',
        unit: 'Titer',
        description: 'X√©t nghi·ªám ph√°t hi·ªán kh√°ng th·ªÉ kh√°ng Treponema pallidum g√¢y b·ªánh giang mai.',
        price: 200000,
        is_active: true
      },
      {
        name: 'X√©t nghi·ªám Herpes Simplex Virus (HSV)',
        specimen: 'M√°u tƒ©nh m·∫°ch',
        normal_range: '√Çm t√≠nh',
        unit: 'Index',
        description: 'X√©t nghi·ªám ph√°t hi·ªán kh√°ng th·ªÉ kh√°ng virus Herpes Simplex type 1 v√† 2.',
        price: 220000,
        is_active: true
      },
      {
        name: 'X√©t nghi·ªám Human Papillomavirus (HPV)',
        specimen: 'Ph·∫øt t·∫ø b√†o c·ªï t·ª≠ cung',
        normal_range: '√Çm t√≠nh',
        unit: 'RLU/CO',
        description: 'X√©t nghi·ªám ph√°t hi·ªán virus HPV g√¢y m·ª•n c√≥c sinh d·ª•c v√† ung th∆∞ c·ªï t·ª≠ cung.',
        price: 350000,
        is_active: true
      },
      {
        name: 'X√©t nghi·ªám Trichomonas vaginalis',
        specimen: 'D·ªãch √¢m ƒë·∫°o',
        normal_range: '√Çm t√≠nh',
        unit: 'Copies/ml',
        description: 'X√©t nghi·ªám ph√°t hi·ªán k√Ω sinh tr√πng Trichomonas vaginalis g√¢y vi√™m √¢m ƒë·∫°o.',
        price: 150000,
        is_active: true
      },
      {
        name: 'X√©t nghi·ªám Mycoplasma genitalium',
        specimen: 'N∆∞·ªõc ti·ªÉu/Ph·∫øt t·∫ø b√†o',
        normal_range: '√Çm t√≠nh',
        unit: 'Copies/ml',
        description: 'X√©t nghi·ªám ph√°t hi·ªán vi khu·∫©n Mycoplasma genitalium g√¢y vi√™m ni·ªáu ƒë·∫°o v√† vi√™m c·ªï t·ª≠ cung.',
        price: 200000,
        is_active: true
      },
      {
        name: 'X√©t nghi·ªám Ureaplasma urealyticum',
        specimen: 'N∆∞·ªõc ti·ªÉu/Ph·∫øt t·∫ø b√†o',
        normal_range: '√Çm t√≠nh',
        unit: 'Copies/ml',
        description: 'X√©t nghi·ªám ph√°t hi·ªán vi khu·∫©n Ureaplasma urealyticum g√¢y vi√™m ni·ªáu ƒë·∫°o.',
        price: 180000,
        is_active: true
      },
      {
        name: 'G√≥i x√©t nghi·ªám STIs c∆° b·∫£n',
        specimen: 'M√°u tƒ©nh m·∫°ch + N∆∞·ªõc ti·ªÉu',
        normal_range: '√Çm t√≠nh',
        unit: 'N/A',
        description:
          'G√≥i x√©t nghi·ªám bao g·ªìm: HIV, Chlamydia, Gonorrhea, Giang mai. Ph√π h·ª£p cho vi·ªác t·∫ßm so√°t STIs c∆° b·∫£n.',
        price: 650000,
        is_active: true
      },
      {
        name: 'G√≥i x√©t nghi·ªám STIs to√†n di·ªán',
        specimen: 'M√°u tƒ©nh m·∫°ch + N∆∞·ªõc ti·ªÉu + Ph·∫øt t·∫ø b√†o',
        normal_range: '√Çm t√≠nh',
        unit: 'N/A',
        description:
          'G√≥i x√©t nghi·ªám bao g·ªìm t·∫•t c·∫£ c√°c x√©t nghi·ªám STIs: HIV, Chlamydia, Gonorrhea, Giang mai, HSV, HPV, Trichomonas, Mycoplasma, Ureaplasma.',
        price: 1200000,
        is_active: true
      },
      {
        name: 'X√©t nghi·ªám HBsAg (Vi√™m gan B)',
        specimen: 'M√°u tƒ©nh m·∫°ch',
        normal_range: '√Çm t√≠nh',
        unit: 'S/CO',
        description: 'X√©t nghi·ªám ph√°t hi·ªán kh√°ng nguy√™n b·ªÅ m·∫∑t virus vi√™m gan B (HBsAg).',
        price: 120000,
        is_active: true
      },
      {
        name: 'X√©t nghi·ªám Anti-HCV (Vi√™m gan C)',
        specimen: 'M√°u tƒ©nh m·∫°ch',
        normal_range: '√Çm t√≠nh',
        unit: 'S/CO',
        description: 'X√©t nghi·ªám ph√°t hi·ªán kh√°ng th·ªÉ kh√°ng virus vi√™m gan C.',
        price: 150000,
        is_active: true
      }
    ]

    // L∆∞u t·∫•t c·∫£ x√©t nghi·ªám STIs v√†o database
    const savedTests = await laboratoryRepository.save(stiTests)

    console.log(`‚úÖ Successfully created ${savedTests.length} STI tests`)
    console.log('\nüìã STI Tests created:')

    savedTests.forEach((test, index) => {
      console.log(`${index + 1}. ${test.name} - ${test.price.toLocaleString('vi-VN')} VNƒê`)
    })

    console.log('\nüí∞ Price Summary:')
    const totalPrice = savedTests.reduce((sum, test) => sum + test.price, 0)
    console.log(`Total value: ${totalPrice.toLocaleString('vi-VN')} VNƒê`)
  } catch (error) {
    console.error('‚ùå Error creating STI tests:', error)
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi database
    if (AppDataSource.isInitialized) {
      await AppDataSource.destroy()
      console.log('Database connection closed')
    }
    process.exit(0)
  }
}

// Ch·∫°y script
createSTITests()
